
Calculator_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000073a  000007ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000f18  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dd7  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000447  00000000  00000000  00001def  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a0a  00000000  00000000  00002236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000278  00000000  00000000  00002de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005bf  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  8a:	0c 94 9b 03 	jmp	0x736	; 0x736 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <calculate_result>:
	   }
    }
}

uint32_t calculate_result (uint8_t * list , uint8_t index  , uint8_t *IsNegative ) 
{
  92:	2f 92       	push	r2
  94:	3f 92       	push	r3
  96:	4f 92       	push	r4
  98:	5f 92       	push	r5
  9a:	6f 92       	push	r6
  9c:	7f 92       	push	r7
  9e:	8f 92       	push	r8
  a0:	9f 92       	push	r9
  a2:	af 92       	push	r10
  a4:	bf 92       	push	r11
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	61 97       	sbiw	r28, 0x11	; 17
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
  c6:	f6 2e       	mov	r15, r22
  c8:	59 8b       	std	Y+17, r21	; 0x11
  ca:	48 8b       	std	Y+16, r20	; 0x10
	uint8_t operator[3];
	uint32_t num=0 ; 
	uint8_t operand_index=0; 
	uint8_t operator_index=0; 
	
	for (uint8_t i=0; i<index ; i++)   // (index-1) as list index contains '=' , and no need to it 
  cc:	66 23       	and	r22, r22
  ce:	09 f4       	brne	.+2      	; 0xd2 <calculate_result+0x40>
  d0:	bd c0       	rjmp	.+378    	; 0x24c <calculate_result+0x1ba>
  d2:	a8 2e       	mov	r10, r24
  d4:	b9 2e       	mov	r11, r25
  d6:	00 e0       	ldi	r16, 0x00	; 0
{
	uint32_t operands[3]; // As the design of that calculator is 3 operands as maximum , and 2 operators as maximum
	uint8_t operator[3];
	uint32_t num=0 ; 
	uint8_t operand_index=0; 
	uint8_t operator_index=0; 
  d8:	99 24       	eor	r9, r9
uint32_t calculate_result (uint8_t * list , uint8_t index  , uint8_t *IsNegative ) 
{
	uint32_t operands[3]; // As the design of that calculator is 3 operands as maximum , and 2 operators as maximum
	uint8_t operator[3];
	uint32_t num=0 ; 
	uint8_t operand_index=0; 
  da:	cc 24       	eor	r12, r12

uint32_t calculate_result (uint8_t * list , uint8_t index  , uint8_t *IsNegative ) 
{
	uint32_t operands[3]; // As the design of that calculator is 3 operands as maximum , and 2 operators as maximum
	uint8_t operator[3];
	uint32_t num=0 ; 
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	dc 01       	movw	r26, r24
		}
		else 
		{
			operator[operator_index++]=list[i];
			operands[operand_index++]=num;
			num=0;	
  e2:	44 24       	eor	r4, r4
  e4:	55 24       	eor	r5, r5
  e6:	32 01       	movw	r6, r4
	uint8_t operand_index=0; 
	uint8_t operator_index=0; 
	
	for (uint8_t i=0; i<index ; i++)   // (index-1) as list index contains '=' , and no need to it 
	{
		if(list[i]>='0'&&list[i]<='9')
  e8:	f5 01       	movw	r30, r10
  ea:	11 91       	ld	r17, Z+
  ec:	5f 01       	movw	r10, r30
  ee:	21 2f       	mov	r18, r17
  f0:	20 53       	subi	r18, 0x30	; 48
  f2:	2a 30       	cpi	r18, 0x0A	; 10
  f4:	b0 f4       	brcc	.+44     	; 0x122 <calculate_result+0x90>
		{
			num *=10; 
  f6:	bc 01       	movw	r22, r24
  f8:	cd 01       	movw	r24, r26
  fa:	2a e0       	ldi	r18, 0x0A	; 10
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__mulsi3>
 106:	ab 01       	movw	r20, r22
 108:	bc 01       	movw	r22, r24
			num +=(list[i]-'0');
 10a:	81 2f       	mov	r24, r17
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	c0 97       	sbiw	r24, 0x30	; 48
 110:	aa 27       	eor	r26, r26
 112:	97 fd       	sbrc	r25, 7
 114:	a0 95       	com	r26
 116:	ba 2f       	mov	r27, r26
 118:	84 0f       	add	r24, r20
 11a:	95 1f       	adc	r25, r21
 11c:	a6 1f       	adc	r26, r22
 11e:	b7 1f       	adc	r27, r23
 120:	1b c0       	rjmp	.+54     	; 0x158 <calculate_result+0xc6>
		}
		else 
		{
			operator[operator_index++]=list[i];
 122:	ed e0       	ldi	r30, 0x0D	; 13
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ec 0f       	add	r30, r28
 128:	fd 1f       	adc	r31, r29
 12a:	e9 0d       	add	r30, r9
 12c:	f1 1d       	adc	r31, r1
 12e:	10 83       	st	Z, r17
 130:	93 94       	inc	r9
			operands[operand_index++]=num;
 132:	ec 2d       	mov	r30, r12
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	2c 0f       	add	r18, r28
 144:	3d 1f       	adc	r19, r29
 146:	e2 0f       	add	r30, r18
 148:	f3 1f       	adc	r31, r19
 14a:	80 83       	st	Z, r24
 14c:	91 83       	std	Z+1, r25	; 0x01
 14e:	a2 83       	std	Z+2, r26	; 0x02
 150:	b3 83       	std	Z+3, r27	; 0x03
 152:	c3 94       	inc	r12
			num=0;	
 154:	d3 01       	movw	r26, r6
 156:	c2 01       	movw	r24, r4
	uint8_t operator[3];
	uint32_t num=0 ; 
	uint8_t operand_index=0; 
	uint8_t operator_index=0; 
	
	for (uint8_t i=0; i<index ; i++)   // (index-1) as list index contains '=' , and no need to it 
 158:	0f 5f       	subi	r16, 0xFF	; 255
 15a:	0f 15       	cp	r16, r15
 15c:	29 f6       	brne	.-118    	; 0xe8 <calculate_result+0x56>
		}
	}
	
	
	
		for (uint8_t i=0; i<operator_index ; i++)	
 15e:	99 20       	and	r9, r9
 160:	09 f4       	brne	.+2      	; 0x164 <calculate_result+0xd2>
 162:	74 c0       	rjmp	.+232    	; 0x24c <calculate_result+0x1ba>
		{
			switch (operator[i])
			{
				case '*':
				   operands[0] *=operands[1];
				   operands[1]=operands[2];
 164:	89 84       	ldd	r8, Y+9	; 0x09
 166:	7a 84       	ldd	r7, Y+10	; 0x0a
 168:	6b 84       	ldd	r6, Y+11	; 0x0b
 16a:	5c 84       	ldd	r5, Y+12	; 0x0c
 16c:	09 81       	ldd	r16, Y+1	; 0x01
 16e:	1a 81       	ldd	r17, Y+2	; 0x02
 170:	2b 81       	ldd	r18, Y+3	; 0x03
 172:	3c 81       	ldd	r19, Y+4	; 0x04
 174:	cd 80       	ldd	r12, Y+5	; 0x05
 176:	de 80       	ldd	r13, Y+6	; 0x06
 178:	ef 80       	ldd	r14, Y+7	; 0x07
 17a:	f8 84       	ldd	r15, Y+8	; 0x08
 17c:	0f 2e       	mov	r0, r31
 17e:	fd e0       	ldi	r31, 0x0D	; 13
 180:	2f 2e       	mov	r2, r31
 182:	33 24       	eor	r3, r3
 184:	f0 2d       	mov	r31, r0
 186:	2c 0e       	add	r2, r28
 188:	3d 1e       	adc	r3, r29
 18a:	51 01       	movw	r10, r2
				   operands[1]=operands[2];
				   break;
				   
			   case '-':
			       if (operands[1]>operands[0])
				       {  *IsNegative=1;
 18c:	44 24       	eor	r4, r4
 18e:	43 94       	inc	r4
	
	
	
		for (uint8_t i=0; i<operator_index ; i++)	
		{
			switch (operator[i])
 190:	d5 01       	movw	r26, r10
 192:	8d 91       	ld	r24, X+
 194:	5d 01       	movw	r10, r26
 196:	8d 32       	cpi	r24, 0x2D	; 45
 198:	21 f1       	breq	.+72     	; 0x1e2 <calculate_result+0x150>
 19a:	8e 32       	cpi	r24, 0x2E	; 46
 19c:	30 f4       	brcc	.+12     	; 0x1aa <calculate_result+0x118>
 19e:	8a 32       	cpi	r24, 0x2A	; 42
 1a0:	51 f0       	breq	.+20     	; 0x1b6 <calculate_result+0x124>
 1a2:	8b 32       	cpi	r24, 0x2B	; 43
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <calculate_result+0x116>
 1a6:	4d c0       	rjmp	.+154    	; 0x242 <calculate_result+0x1b0>
 1a8:	13 c0       	rjmp	.+38     	; 0x1d0 <calculate_result+0x13e>
 1aa:	8f 32       	cpi	r24, 0x2F	; 47
 1ac:	c1 f1       	breq	.+112    	; 0x21e <calculate_result+0x18c>
 1ae:	8d 33       	cpi	r24, 0x3D	; 61
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <calculate_result+0x122>
 1b2:	47 c0       	rjmp	.+142    	; 0x242 <calculate_result+0x1b0>
 1b4:	41 c0       	rjmp	.+130    	; 0x238 <calculate_result+0x1a6>
			{
				case '*':
				   operands[0] *=operands[1];
 1b6:	c9 01       	movw	r24, r18
 1b8:	b8 01       	movw	r22, r16
 1ba:	a7 01       	movw	r20, r14
 1bc:	96 01       	movw	r18, r12
 1be:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__mulsi3>
 1c2:	8b 01       	movw	r16, r22
 1c4:	9c 01       	movw	r18, r24
				   operands[1]=operands[2];
 1c6:	c8 2c       	mov	r12, r8
 1c8:	d7 2c       	mov	r13, r7
 1ca:	e6 2c       	mov	r14, r6
 1cc:	f5 2c       	mov	r15, r5
				   break;
 1ce:	39 c0       	rjmp	.+114    	; 0x242 <calculate_result+0x1b0>
					 
			   case '+':
				   operands[0]+=operands[1];
 1d0:	0c 0d       	add	r16, r12
 1d2:	1d 1d       	adc	r17, r13
 1d4:	2e 1d       	adc	r18, r14
 1d6:	3f 1d       	adc	r19, r15
				   operands[1]=operands[2];
 1d8:	c8 2c       	mov	r12, r8
 1da:	d7 2c       	mov	r13, r7
 1dc:	e6 2c       	mov	r14, r6
 1de:	f5 2c       	mov	r15, r5
				   break;
 1e0:	30 c0       	rjmp	.+96     	; 0x242 <calculate_result+0x1b0>
				   
			   case '-':
			       if (operands[1]>operands[0])
 1e2:	0c 15       	cp	r16, r12
 1e4:	1d 05       	cpc	r17, r13
 1e6:	2e 05       	cpc	r18, r14
 1e8:	3f 05       	cpc	r19, r15
 1ea:	80 f4       	brcc	.+32     	; 0x20c <calculate_result+0x17a>
				       {  *IsNegative=1;
 1ec:	e8 89       	ldd	r30, Y+16	; 0x10
 1ee:	f9 89       	ldd	r31, Y+17	; 0x11
 1f0:	40 82       	st	Z, r4
				          operands[0]=operands[1]-operands[0];
 1f2:	d7 01       	movw	r26, r14
 1f4:	c6 01       	movw	r24, r12
 1f6:	80 1b       	sub	r24, r16
 1f8:	91 0b       	sbc	r25, r17
 1fa:	a2 0b       	sbc	r26, r18
 1fc:	b3 0b       	sbc	r27, r19
 1fe:	8c 01       	movw	r16, r24
 200:	9d 01       	movw	r18, r26
						  operands[1]=operands[2];
 202:	c8 2c       	mov	r12, r8
 204:	d7 2c       	mov	r13, r7
 206:	e6 2c       	mov	r14, r6
 208:	f5 2c       	mov	r15, r5
 20a:	1b c0       	rjmp	.+54     	; 0x242 <calculate_result+0x1b0>
					   }
				  else
					   { 
						   operands[0]-=operands[1];
 20c:	0c 19       	sub	r16, r12
 20e:	1d 09       	sbc	r17, r13
 210:	2e 09       	sbc	r18, r14
 212:	3f 09       	sbc	r19, r15
						   operands[1]=operands[2];
 214:	c8 2c       	mov	r12, r8
 216:	d7 2c       	mov	r13, r7
 218:	e6 2c       	mov	r14, r6
 21a:	f5 2c       	mov	r15, r5
 21c:	12 c0       	rjmp	.+36     	; 0x242 <calculate_result+0x1b0>
					    }				  
				  break;
			   
			   case '/':
				   operands[0] /=operands[1];
 21e:	c9 01       	movw	r24, r18
 220:	b8 01       	movw	r22, r16
 222:	a7 01       	movw	r20, r14
 224:	96 01       	movw	r18, r12
 226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__udivmodsi4>
 22a:	89 01       	movw	r16, r18
 22c:	9a 01       	movw	r18, r20
				   operands[1]=operands[2];
 22e:	c8 2c       	mov	r12, r8
 230:	d7 2c       	mov	r13, r7
 232:	e6 2c       	mov	r14, r6
 234:	f5 2c       	mov	r15, r5
				   break;
 236:	05 c0       	rjmp	.+10     	; 0x242 <calculate_result+0x1b0>
			   
			   case '=':
			        return operands[0];
 238:	60 2f       	mov	r22, r16
 23a:	71 2f       	mov	r23, r17
 23c:	82 2f       	mov	r24, r18
 23e:	93 2f       	mov	r25, r19
 240:	05 c0       	rjmp	.+10     	; 0x24c <calculate_result+0x1ba>
		}
	}
	
	
	
		for (uint8_t i=0; i<operator_index ; i++)	
 242:	8a 2d       	mov	r24, r10
 244:	82 19       	sub	r24, r2
 246:	89 15       	cp	r24, r9
 248:	08 f4       	brcc	.+2      	; 0x24c <calculate_result+0x1ba>
 24a:	a2 cf       	rjmp	.-188    	; 0x190 <calculate_result+0xfe>
			        break;
				
					 
			}
		}
	}
 24c:	61 96       	adiw	r28, 0x11	; 17
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	df 90       	pop	r13
 266:	cf 90       	pop	r12
 268:	bf 90       	pop	r11
 26a:	af 90       	pop	r10
 26c:	9f 90       	pop	r9
 26e:	8f 90       	pop	r8
 270:	7f 90       	pop	r7
 272:	6f 90       	pop	r6
 274:	5f 90       	pop	r5
 276:	4f 90       	pop	r4
 278:	3f 90       	pop	r3
 27a:	2f 90       	pop	r2
 27c:	08 95       	ret

0000027e <main>:
uint32_t calculate_result (uint8_t * list , uint8_t index , uint8_t *  );



int main(void)
{ LCD_init();
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	65 97       	sbiw	r28, 0x15	; 21
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61
 292:	0e 94 88 02 	call	0x510	; 0x510 <LCD_init>
  keypad_init();
 296:	0e 94 9c 01 	call	0x338	; 0x338 <keypad_init>
  
  
  uint8_t keypad_reading_list [20];
  uint8_t index=0;
  uint8_t ISPRESSED =1;
  uint8_t IsNegative =0 ;
 29a:	1d 8a       	std	Y+21, r1	; 0x15
  keypad_init();
  
  
  uint8_t keypad_reading_list [20];
  uint8_t index=0;
  uint8_t ISPRESSED =1;
 29c:	ff 24       	eor	r15, r15
 29e:	f3 94       	inc	r15
{ LCD_init();
  keypad_init();
  
  
  uint8_t keypad_reading_list [20];
  uint8_t index=0;
 2a0:	00 e0       	ldi	r16, 0x00	; 0
		   ISPRESSED=0;
		      
	   }
	   else if (key==-1 && !ISPRESSED)
	   {
		   ISPRESSED=1;
 2a2:	ee 24       	eor	r14, r14
 2a4:	e3 94       	inc	r14
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <main+0x2c>
 2a8:	fe 2c       	mov	r15, r14
  uint8_t IsNegative =0 ;

  
    while(1)
    {
       int8_t key = keypad_read();
 2aa:	0e 94 a5 01 	call	0x34a	; 0x34a <keypad_read>
 2ae:	18 2f       	mov	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	8f e3       	ldi	r24, 0x3F	; 63
 2b2:	9c e9       	ldi	r25, 0x9C	; 156
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x36>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x3c>
 2ba:	00 00       	nop
	   _delay_ms(10);
	   
	   if (key=='C')
 2bc:	13 34       	cpi	r17, 0x43	; 67
 2be:	29 f4       	brne	.+10     	; 0x2ca <main+0x4c>
	    {  
			LCD_clear();
 2c0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_clear>
			index=0;
			IsNegative=0;
 2c4:	1d 8a       	std	Y+21, r1	; 0x15
	   _delay_ms(10);
	   
	   if (key=='C')
	    {  
			LCD_clear();
			index=0;
 2c6:	00 e0       	ldi	r16, 0x00	; 0
			IsNegative=0;
		    continue ;   
 2c8:	f0 cf       	rjmp	.-32     	; 0x2aa <main+0x2c>
		}
	   
	 else if(key!=-1 && ISPRESSED) // flag to avoid bouncing of keypad buttons
 2ca:	1f 3f       	cpi	r17, 0xFF	; 255
 2cc:	99 f0       	breq	.+38     	; 0x2f4 <main+0x76>
 2ce:	ff 20       	and	r15, r15
 2d0:	a1 f0       	breq	.+40     	; 0x2fa <main+0x7c>
	   {   
		   LCD_goToRowColumn(0,index);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	60 2f       	mov	r22, r16
 2d6:	0e 94 43 03 	call	0x686	; 0x686 <LCD_goToRowColumn>
		   keypad_reading_list[index++]=key;
 2da:	e1 e0       	ldi	r30, 0x01	; 1
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	ec 0f       	add	r30, r28
 2e0:	fd 1f       	adc	r31, r29
 2e2:	e0 0f       	add	r30, r16
 2e4:	f1 1d       	adc	r31, r1
 2e6:	10 83       	st	Z, r17
 2e8:	0f 5f       	subi	r16, 0xFF	; 255
		   LCD_write_char(key);
 2ea:	81 2f       	mov	r24, r17
 2ec:	0e 94 42 02 	call	0x484	; 0x484 <LCD_write_char>
		   ISPRESSED=0;
 2f0:	ff 24       	eor	r15, r15
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <main+0x7c>
		      
	   }
	   else if (key==-1 && !ISPRESSED)
 2f4:	ff 20       	and	r15, r15
 2f6:	c1 f2       	breq	.-80     	; 0x2a8 <main+0x2a>
 2f8:	d8 cf       	rjmp	.-80     	; 0x2aa <main+0x2c>
	   {
		   ISPRESSED=1;
	   }		
	      
	   if(key=='=')
 2fa:	1d 33       	cpi	r17, 0x3D	; 61
 2fc:	b1 f6       	brne	.-84     	; 0x2aa <main+0x2c>
	   {
		   LCD_goToRowColumn(1,0);
 2fe:	8e 2d       	mov	r24, r14
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	0e 94 43 03 	call	0x686	; 0x686 <LCD_goToRowColumn>
		   uint32_t result =calculate_result(keypad_reading_list , index , &IsNegative) ;
 306:	ce 01       	movw	r24, r28
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	60 2f       	mov	r22, r16
 30c:	ae 01       	movw	r20, r28
 30e:	4b 5e       	subi	r20, 0xEB	; 235
 310:	5f 4f       	sbci	r21, 0xFF	; 255
 312:	0e 94 49 00 	call	0x92	; 0x92 <calculate_result>
 316:	4b 01       	movw	r8, r22
 318:	5c 01       	movw	r10, r24
		   if(IsNegative==1)
 31a:	8d 89       	ldd	r24, Y+21	; 0x15
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	39 f4       	brne	.+14     	; 0x32e <main+0xb0>
		   {
			  LCD_write_char('-') ;
 320:	8d e2       	ldi	r24, 0x2D	; 45
 322:	0e 94 42 02 	call	0x484	; 0x484 <LCD_write_char>
			  LCD_goToRowColumn(1,1);
 326:	8e 2d       	mov	r24, r14
 328:	6e 2d       	mov	r22, r14
 32a:	0e 94 43 03 	call	0x686	; 0x686 <LCD_goToRowColumn>
			 
		   }
		   LCD_write_num(result);
 32e:	c5 01       	movw	r24, r10
 330:	b4 01       	movw	r22, r8
 332:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_write_num>
 336:	b9 cf       	rjmp	.-142    	; 0x2aa <main+0x2c>

00000338 <keypad_init>:
 338:	8a 98       	cbi	0x11, 2	; 17
 33a:	8b 98       	cbi	0x11, 3	; 17
 33c:	8c 98       	cbi	0x11, 4	; 17
 33e:	8d 98       	cbi	0x11, 5	; 17
 340:	bc 9a       	sbi	0x17, 4	; 23
 342:	bd 9a       	sbi	0x17, 5	; 23
 344:	be 9a       	sbi	0x17, 6	; 23
 346:	bf 9a       	sbi	0x17, 7	; 23
 348:	08 95       	ret

0000034a <keypad_read>:
 34a:	e0 e0       	ldi	r30, 0x00	; 0
 34c:	88 b3       	in	r24, 0x18	; 24
 34e:	8f 70       	andi	r24, 0x0F	; 15
 350:	88 bb       	out	0x18, r24	; 24
 352:	ee 23       	and	r30, r30
 354:	21 f4       	brne	.+8      	; 0x35e <keypad_read+0x14>
 356:	88 b3       	in	r24, 0x18	; 24
 358:	80 6e       	ori	r24, 0xE0	; 224
 35a:	88 bb       	out	0x18, r24	; 24
 35c:	0c c0       	rjmp	.+24     	; 0x376 <keypad_read+0x2c>
 35e:	e1 30       	cpi	r30, 0x01	; 1
 360:	21 f4       	brne	.+8      	; 0x36a <keypad_read+0x20>
 362:	88 b3       	in	r24, 0x18	; 24
 364:	80 6d       	ori	r24, 0xD0	; 208
 366:	88 bb       	out	0x18, r24	; 24
 368:	0b c0       	rjmp	.+22     	; 0x380 <keypad_read+0x36>
 36a:	e2 30       	cpi	r30, 0x02	; 2
 36c:	21 f4       	brne	.+8      	; 0x376 <keypad_read+0x2c>
 36e:	88 b3       	in	r24, 0x18	; 24
 370:	80 6b       	ori	r24, 0xB0	; 176
 372:	88 bb       	out	0x18, r24	; 24
 374:	05 c0       	rjmp	.+10     	; 0x380 <keypad_read+0x36>
 376:	e3 30       	cpi	r30, 0x03	; 3
 378:	19 f4       	brne	.+6      	; 0x380 <keypad_read+0x36>
 37a:	88 b3       	in	r24, 0x18	; 24
 37c:	80 67       	ori	r24, 0x70	; 112
 37e:	88 bb       	out	0x18, r24	; 24
 380:	80 b3       	in	r24, 0x10	; 16
 382:	82 fd       	sbrc	r24, 2
 384:	09 c0       	rjmp	.+18     	; 0x398 <keypad_read+0x4e>
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	e0 5a       	subi	r30, 0xA0	; 160
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	80 81       	ld	r24, Z
 396:	08 95       	ret
 398:	80 b3       	in	r24, 0x10	; 16
 39a:	83 fd       	sbrc	r24, 3
 39c:	09 c0       	rjmp	.+18     	; 0x3b0 <keypad_read+0x66>
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	e0 5a       	subi	r30, 0xA0	; 160
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	81 81       	ldd	r24, Z+1	; 0x01
 3ae:	08 95       	ret
 3b0:	80 b3       	in	r24, 0x10	; 16
 3b2:	84 fd       	sbrc	r24, 4
 3b4:	09 c0       	rjmp	.+18     	; 0x3c8 <keypad_read+0x7e>
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	ee 0f       	add	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	e0 5a       	subi	r30, 0xA0	; 160
 3c2:	ff 4f       	sbci	r31, 0xFF	; 255
 3c4:	82 81       	ldd	r24, Z+2	; 0x02
 3c6:	08 95       	ret
 3c8:	80 b3       	in	r24, 0x10	; 16
 3ca:	85 fd       	sbrc	r24, 5
 3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <keypad_read+0x96>
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	e0 5a       	subi	r30, 0xA0	; 160
 3da:	ff 4f       	sbci	r31, 0xFF	; 255
 3dc:	83 81       	ldd	r24, Z+3	; 0x03
 3de:	08 95       	ret
 3e0:	8f e9       	ldi	r24, 0x9F	; 159
 3e2:	9f e0       	ldi	r25, 0x0F	; 15
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <keypad_read+0x9a>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <keypad_read+0xa0>
 3ea:	00 00       	nop
 3ec:	ef 5f       	subi	r30, 0xFF	; 255
 3ee:	e4 30       	cpi	r30, 0x04	; 4
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <keypad_read+0xaa>
 3f2:	ac cf       	rjmp	.-168    	; 0x34c <keypad_read+0x2>
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	08 95       	ret

000003f8 <LCD_write_command>:
 3f8:	d9 98       	cbi	0x1b, 1	; 27
 3fa:	84 ff       	sbrs	r24, 4
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <LCD_write_command+0xa>
 3fe:	db 9a       	sbi	0x1b, 3	; 27
 400:	01 c0       	rjmp	.+2      	; 0x404 <LCD_write_command+0xc>
 402:	db 98       	cbi	0x1b, 3	; 27
 404:	85 ff       	sbrs	r24, 5
 406:	02 c0       	rjmp	.+4      	; 0x40c <LCD_write_command+0x14>
 408:	dc 9a       	sbi	0x1b, 4	; 27
 40a:	01 c0       	rjmp	.+2      	; 0x40e <LCD_write_command+0x16>
 40c:	dc 98       	cbi	0x1b, 4	; 27
 40e:	86 ff       	sbrs	r24, 6
 410:	02 c0       	rjmp	.+4      	; 0x416 <LCD_write_command+0x1e>
 412:	dd 9a       	sbi	0x1b, 5	; 27
 414:	01 c0       	rjmp	.+2      	; 0x418 <LCD_write_command+0x20>
 416:	dd 98       	cbi	0x1b, 5	; 27
 418:	88 23       	and	r24, r24
 41a:	14 f4       	brge	.+4      	; 0x420 <LCD_write_command+0x28>
 41c:	de 9a       	sbi	0x1b, 6	; 27
 41e:	01 c0       	rjmp	.+2      	; 0x422 <LCD_write_command+0x2a>
 420:	de 98       	cbi	0x1b, 6	; 27
 422:	da 9a       	sbi	0x1b, 2	; 27
 424:	ef e9       	ldi	r30, 0x9F	; 159
 426:	ff e0       	ldi	r31, 0x0F	; 15
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <LCD_write_command+0x30>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <LCD_write_command+0x36>
 42e:	00 00       	nop
 430:	da 98       	cbi	0x1b, 2	; 27
 432:	ef e9       	ldi	r30, 0x9F	; 159
 434:	ff e0       	ldi	r31, 0x0F	; 15
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <LCD_write_command+0x3e>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_write_command+0x44>
 43c:	00 00       	nop
 43e:	80 ff       	sbrs	r24, 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <LCD_write_command+0x4e>
 442:	db 9a       	sbi	0x1b, 3	; 27
 444:	01 c0       	rjmp	.+2      	; 0x448 <LCD_write_command+0x50>
 446:	db 98       	cbi	0x1b, 3	; 27
 448:	81 ff       	sbrs	r24, 1
 44a:	02 c0       	rjmp	.+4      	; 0x450 <LCD_write_command+0x58>
 44c:	dc 9a       	sbi	0x1b, 4	; 27
 44e:	01 c0       	rjmp	.+2      	; 0x452 <LCD_write_command+0x5a>
 450:	dc 98       	cbi	0x1b, 4	; 27
 452:	82 ff       	sbrs	r24, 2
 454:	02 c0       	rjmp	.+4      	; 0x45a <LCD_write_command+0x62>
 456:	dd 9a       	sbi	0x1b, 5	; 27
 458:	01 c0       	rjmp	.+2      	; 0x45c <LCD_write_command+0x64>
 45a:	dd 98       	cbi	0x1b, 5	; 27
 45c:	83 ff       	sbrs	r24, 3
 45e:	02 c0       	rjmp	.+4      	; 0x464 <LCD_write_command+0x6c>
 460:	de 9a       	sbi	0x1b, 6	; 27
 462:	01 c0       	rjmp	.+2      	; 0x466 <LCD_write_command+0x6e>
 464:	de 98       	cbi	0x1b, 6	; 27
 466:	da 9a       	sbi	0x1b, 2	; 27
 468:	8f e9       	ldi	r24, 0x9F	; 159
 46a:	9f e0       	ldi	r25, 0x0F	; 15
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_write_command+0x74>
 470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_write_command+0x7a>
 472:	00 00       	nop
 474:	da 98       	cbi	0x1b, 2	; 27
 476:	ef e9       	ldi	r30, 0x9F	; 159
 478:	ff e0       	ldi	r31, 0x0F	; 15
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <LCD_write_command+0x82>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <LCD_write_command+0x88>
 480:	00 00       	nop
 482:	08 95       	ret

00000484 <LCD_write_char>:
 484:	d9 9a       	sbi	0x1b, 1	; 27
 486:	84 ff       	sbrs	r24, 4
 488:	02 c0       	rjmp	.+4      	; 0x48e <LCD_write_char+0xa>
 48a:	db 9a       	sbi	0x1b, 3	; 27
 48c:	01 c0       	rjmp	.+2      	; 0x490 <LCD_write_char+0xc>
 48e:	db 98       	cbi	0x1b, 3	; 27
 490:	85 ff       	sbrs	r24, 5
 492:	02 c0       	rjmp	.+4      	; 0x498 <LCD_write_char+0x14>
 494:	dc 9a       	sbi	0x1b, 4	; 27
 496:	01 c0       	rjmp	.+2      	; 0x49a <LCD_write_char+0x16>
 498:	dc 98       	cbi	0x1b, 4	; 27
 49a:	86 ff       	sbrs	r24, 6
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <LCD_write_char+0x1e>
 49e:	dd 9a       	sbi	0x1b, 5	; 27
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <LCD_write_char+0x20>
 4a2:	dd 98       	cbi	0x1b, 5	; 27
 4a4:	88 23       	and	r24, r24
 4a6:	14 f4       	brge	.+4      	; 0x4ac <LCD_write_char+0x28>
 4a8:	de 9a       	sbi	0x1b, 6	; 27
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <LCD_write_char+0x2a>
 4ac:	de 98       	cbi	0x1b, 6	; 27
 4ae:	da 9a       	sbi	0x1b, 2	; 27
 4b0:	ef e9       	ldi	r30, 0x9F	; 159
 4b2:	ff e0       	ldi	r31, 0x0F	; 15
 4b4:	31 97       	sbiw	r30, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_write_char+0x30>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_write_char+0x36>
 4ba:	00 00       	nop
 4bc:	da 98       	cbi	0x1b, 2	; 27
 4be:	ef e9       	ldi	r30, 0x9F	; 159
 4c0:	ff e0       	ldi	r31, 0x0F	; 15
 4c2:	31 97       	sbiw	r30, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <LCD_write_char+0x3e>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_write_char+0x44>
 4c8:	00 00       	nop
 4ca:	80 ff       	sbrs	r24, 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <LCD_write_char+0x4e>
 4ce:	db 9a       	sbi	0x1b, 3	; 27
 4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <LCD_write_char+0x50>
 4d2:	db 98       	cbi	0x1b, 3	; 27
 4d4:	81 ff       	sbrs	r24, 1
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <LCD_write_char+0x58>
 4d8:	dc 9a       	sbi	0x1b, 4	; 27
 4da:	01 c0       	rjmp	.+2      	; 0x4de <LCD_write_char+0x5a>
 4dc:	dc 98       	cbi	0x1b, 4	; 27
 4de:	82 ff       	sbrs	r24, 2
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <LCD_write_char+0x62>
 4e2:	dd 9a       	sbi	0x1b, 5	; 27
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <LCD_write_char+0x64>
 4e6:	dd 98       	cbi	0x1b, 5	; 27
 4e8:	83 ff       	sbrs	r24, 3
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <LCD_write_char+0x6c>
 4ec:	de 9a       	sbi	0x1b, 6	; 27
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <LCD_write_char+0x6e>
 4f0:	de 98       	cbi	0x1b, 6	; 27
 4f2:	da 9a       	sbi	0x1b, 2	; 27
 4f4:	8f e9       	ldi	r24, 0x9F	; 159
 4f6:	9f e0       	ldi	r25, 0x0F	; 15
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_write_char+0x74>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_write_char+0x7a>
 4fe:	00 00       	nop
 500:	da 98       	cbi	0x1b, 2	; 27
 502:	ef e9       	ldi	r30, 0x9F	; 159
 504:	ff e0       	ldi	r31, 0x0F	; 15
 506:	31 97       	sbiw	r30, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <LCD_write_char+0x82>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <LCD_write_char+0x88>
 50c:	00 00       	nop
 50e:	08 95       	ret

00000510 <LCD_init>:
 510:	8a b3       	in	r24, 0x1a	; 26
 512:	8e 67       	ori	r24, 0x7E	; 126
 514:	8a bb       	out	0x1a, r24	; 26
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	0e 94 42 02 	call	0x484	; 0x484 <LCD_write_char>
 51c:	8f e7       	ldi	r24, 0x7F	; 127
 51e:	9e e3       	ldi	r25, 0x3E	; 62
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <LCD_init+0x10>
 524:	00 c0       	rjmp	.+0      	; 0x526 <LCD_init+0x16>
 526:	00 00       	nop
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	0e 94 42 02 	call	0x484	; 0x484 <LCD_write_char>
 52e:	af e7       	ldi	r26, 0x7F	; 127
 530:	be e3       	ldi	r27, 0x3E	; 62
 532:	11 97       	sbiw	r26, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <LCD_init+0x22>
 536:	00 c0       	rjmp	.+0      	; 0x538 <LCD_init+0x28>
 538:	00 00       	nop
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	0e 94 42 02 	call	0x484	; 0x484 <LCD_write_char>
 540:	8f e7       	ldi	r24, 0x7F	; 127
 542:	9e e3       	ldi	r25, 0x3E	; 62
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <LCD_init+0x34>
 548:	00 c0       	rjmp	.+0      	; 0x54a <LCD_init+0x3a>
 54a:	00 00       	nop
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_write_command>
 552:	88 e2       	ldi	r24, 0x28	; 40
 554:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_write_command>
 558:	88 e0       	ldi	r24, 0x08	; 8
 55a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_write_command>
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_write_command>
 564:	86 e0       	ldi	r24, 0x06	; 6
 566:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_write_command>
 56a:	8c e0       	ldi	r24, 0x0C	; 12
 56c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_write_command>
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	99 ef       	ldi	r25, 0xF9	; 249
 574:	a0 e0       	ldi	r26, 0x00	; 0
 576:	81 50       	subi	r24, 0x01	; 1
 578:	90 40       	sbci	r25, 0x00	; 0
 57a:	a0 40       	sbci	r26, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <LCD_init+0x66>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <LCD_init+0x70>
 580:	00 00       	nop
 582:	08 95       	ret

00000584 <LCD_write_string>:
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	8c 01       	movw	r16, r24
 58c:	fc 01       	movw	r30, r24
 58e:	80 81       	ld	r24, Z
 590:	88 23       	and	r24, r24
 592:	51 f0       	breq	.+20     	; 0x5a8 <LCD_write_string+0x24>
 594:	c0 e0       	ldi	r28, 0x00	; 0
 596:	0e 94 42 02 	call	0x484	; 0x484 <LCD_write_char>
 59a:	cf 5f       	subi	r28, 0xFF	; 255
 59c:	f8 01       	movw	r30, r16
 59e:	ec 0f       	add	r30, r28
 5a0:	f1 1d       	adc	r31, r1
 5a2:	80 81       	ld	r24, Z
 5a4:	88 23       	and	r24, r24
 5a6:	b9 f7       	brne	.-18     	; 0x596 <LCD_write_string+0x12>
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	08 95       	ret

000005b0 <LCD_write_num>:
 5b0:	8f 92       	push	r8
 5b2:	9f 92       	push	r9
 5b4:	af 92       	push	r10
 5b6:	bf 92       	push	r11
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
 5c6:	2a 97       	sbiw	r28, 0x0a	; 10
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	f8 94       	cli
 5cc:	de bf       	out	0x3e, r29	; 62
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	cd bf       	out	0x3d, r28	; 61
 5d2:	dc 01       	movw	r26, r24
 5d4:	cb 01       	movw	r24, r22
 5d6:	ae 01       	movw	r20, r28
 5d8:	4f 5f       	subi	r20, 0xFF	; 255
 5da:	5f 4f       	sbci	r21, 0xFF	; 255
 5dc:	2a e0       	ldi	r18, 0x0A	; 10
 5de:	fa 01       	movw	r30, r20
 5e0:	11 92       	st	Z+, r1
 5e2:	2a 95       	dec	r18
 5e4:	e9 f7       	brne	.-6      	; 0x5e0 <LCD_write_num+0x30>
 5e6:	00 97       	sbiw	r24, 0x00	; 0
 5e8:	a1 05       	cpc	r26, r1
 5ea:	b1 05       	cpc	r27, r1
 5ec:	21 f4       	brne	.+8      	; 0x5f6 <LCD_write_num+0x46>
 5ee:	80 e3       	ldi	r24, 0x30	; 48
 5f0:	0e 94 42 02 	call	0x484	; 0x484 <LCD_write_char>
 5f4:	38 c0       	rjmp	.+112    	; 0x666 <LCD_write_num+0xb6>
 5f6:	10 e0       	ldi	r17, 0x00	; 0
 5f8:	0f 2e       	mov	r0, r31
 5fa:	fa e0       	ldi	r31, 0x0A	; 10
 5fc:	8f 2e       	mov	r8, r31
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	9f 2e       	mov	r9, r31
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	af 2e       	mov	r10, r31
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	bf 2e       	mov	r11, r31
 60a:	f0 2d       	mov	r31, r0
 60c:	e1 2e       	mov	r14, r17
 60e:	ff 24       	eor	r15, r15
 610:	e7 fc       	sbrc	r14, 7
 612:	f0 94       	com	r15
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	2c 0f       	add	r18, r28
 61a:	3d 1f       	adc	r19, r29
 61c:	e2 0e       	add	r14, r18
 61e:	f3 1e       	adc	r15, r19
 620:	bc 01       	movw	r22, r24
 622:	cd 01       	movw	r24, r26
 624:	a5 01       	movw	r20, r10
 626:	94 01       	movw	r18, r8
 628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__udivmodsi4>
 62c:	60 5d       	subi	r22, 0xD0	; 208
 62e:	f7 01       	movw	r30, r14
 630:	60 83       	st	Z, r22
 632:	82 2f       	mov	r24, r18
 634:	93 2f       	mov	r25, r19
 636:	a4 2f       	mov	r26, r20
 638:	b5 2f       	mov	r27, r21
 63a:	1f 5f       	subi	r17, 0xFF	; 255
 63c:	00 97       	sbiw	r24, 0x00	; 0
 63e:	a1 05       	cpc	r26, r1
 640:	b1 05       	cpc	r27, r1
 642:	21 f7       	brne	.-56     	; 0x60c <LCD_write_num+0x5c>
 644:	11 50       	subi	r17, 0x01	; 1
 646:	7a f0       	brmi	.+30     	; 0x666 <LCD_write_num+0xb6>
 648:	e1 2f       	mov	r30, r17
 64a:	ff 27       	eor	r31, r31
 64c:	e7 fd       	sbrc	r30, 7
 64e:	f0 95       	com	r31
 650:	21 e0       	ldi	r18, 0x01	; 1
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	2c 0f       	add	r18, r28
 656:	3d 1f       	adc	r19, r29
 658:	e2 0f       	add	r30, r18
 65a:	f3 1f       	adc	r31, r19
 65c:	80 81       	ld	r24, Z
 65e:	0e 94 42 02 	call	0x484	; 0x484 <LCD_write_char>
 662:	11 50       	subi	r17, 0x01	; 1
 664:	88 f7       	brcc	.-30     	; 0x648 <LCD_write_num+0x98>
 666:	2a 96       	adiw	r28, 0x0a	; 10
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	f8 94       	cli
 66c:	de bf       	out	0x3e, r29	; 62
 66e:	0f be       	out	0x3f, r0	; 63
 670:	cd bf       	out	0x3d, r28	; 61
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	ff 90       	pop	r15
 67a:	ef 90       	pop	r14
 67c:	bf 90       	pop	r11
 67e:	af 90       	pop	r10
 680:	9f 90       	pop	r9
 682:	8f 90       	pop	r8
 684:	08 95       	ret

00000686 <LCD_goToRowColumn>:
 686:	88 23       	and	r24, r24
 688:	29 f0       	breq	.+10     	; 0x694 <LCD_goToRowColumn+0xe>
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	21 f4       	brne	.+8      	; 0x696 <LCD_goToRowColumn+0x10>
 68e:	96 2f       	mov	r25, r22
 690:	90 5c       	subi	r25, 0xC0	; 192
 692:	01 c0       	rjmp	.+2      	; 0x696 <LCD_goToRowColumn+0x10>
 694:	96 2f       	mov	r25, r22
 696:	89 2f       	mov	r24, r25
 698:	80 68       	ori	r24, 0x80	; 128
 69a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_write_command>
 69e:	08 95       	ret

000006a0 <LCD_clear>:
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_write_command>
 6a6:	8f e9       	ldi	r24, 0x9F	; 159
 6a8:	9f e0       	ldi	r25, 0x0F	; 15
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <LCD_clear+0xa>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <LCD_clear+0x10>
 6b0:	00 00       	nop
 6b2:	08 95       	ret

000006b4 <__mulsi3>:
 6b4:	62 9f       	mul	r22, r18
 6b6:	d0 01       	movw	r26, r0
 6b8:	73 9f       	mul	r23, r19
 6ba:	f0 01       	movw	r30, r0
 6bc:	82 9f       	mul	r24, r18
 6be:	e0 0d       	add	r30, r0
 6c0:	f1 1d       	adc	r31, r1
 6c2:	64 9f       	mul	r22, r20
 6c4:	e0 0d       	add	r30, r0
 6c6:	f1 1d       	adc	r31, r1
 6c8:	92 9f       	mul	r25, r18
 6ca:	f0 0d       	add	r31, r0
 6cc:	83 9f       	mul	r24, r19
 6ce:	f0 0d       	add	r31, r0
 6d0:	74 9f       	mul	r23, r20
 6d2:	f0 0d       	add	r31, r0
 6d4:	65 9f       	mul	r22, r21
 6d6:	f0 0d       	add	r31, r0
 6d8:	99 27       	eor	r25, r25
 6da:	72 9f       	mul	r23, r18
 6dc:	b0 0d       	add	r27, r0
 6de:	e1 1d       	adc	r30, r1
 6e0:	f9 1f       	adc	r31, r25
 6e2:	63 9f       	mul	r22, r19
 6e4:	b0 0d       	add	r27, r0
 6e6:	e1 1d       	adc	r30, r1
 6e8:	f9 1f       	adc	r31, r25
 6ea:	bd 01       	movw	r22, r26
 6ec:	cf 01       	movw	r24, r30
 6ee:	11 24       	eor	r1, r1
 6f0:	08 95       	ret

000006f2 <__udivmodsi4>:
 6f2:	a1 e2       	ldi	r26, 0x21	; 33
 6f4:	1a 2e       	mov	r1, r26
 6f6:	aa 1b       	sub	r26, r26
 6f8:	bb 1b       	sub	r27, r27
 6fa:	fd 01       	movw	r30, r26
 6fc:	0d c0       	rjmp	.+26     	; 0x718 <__udivmodsi4_ep>

000006fe <__udivmodsi4_loop>:
 6fe:	aa 1f       	adc	r26, r26
 700:	bb 1f       	adc	r27, r27
 702:	ee 1f       	adc	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	a2 17       	cp	r26, r18
 708:	b3 07       	cpc	r27, r19
 70a:	e4 07       	cpc	r30, r20
 70c:	f5 07       	cpc	r31, r21
 70e:	20 f0       	brcs	.+8      	; 0x718 <__udivmodsi4_ep>
 710:	a2 1b       	sub	r26, r18
 712:	b3 0b       	sbc	r27, r19
 714:	e4 0b       	sbc	r30, r20
 716:	f5 0b       	sbc	r31, r21

00000718 <__udivmodsi4_ep>:
 718:	66 1f       	adc	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	1a 94       	dec	r1
 722:	69 f7       	brne	.-38     	; 0x6fe <__udivmodsi4_loop>
 724:	60 95       	com	r22
 726:	70 95       	com	r23
 728:	80 95       	com	r24
 72a:	90 95       	com	r25
 72c:	9b 01       	movw	r18, r22
 72e:	ac 01       	movw	r20, r24
 730:	bd 01       	movw	r22, r26
 732:	cf 01       	movw	r24, r30
 734:	08 95       	ret

00000736 <_exit>:
 736:	f8 94       	cli

00000738 <__stop_program>:
 738:	ff cf       	rjmp	.-2      	; 0x738 <__stop_program>
